0619823_IDB_Test.txt

## Isolastion by distance test for Fst vs xy coordinates (distance), Fst vs elevation, and Fst vs topography 

# To create a matrix of values for the Mantel test, you typically need a pairwise comparison measure between the sites. Here are a few commonly used statistical methods to generate such matrices:

# Euclidean Distance:
# If you have the spatial coordinates (e.g., latitude and longitude) of the sites, you can calculate the Euclidean distance matrix using the coordinates. The Euclidean distance between two points represents the straight-line distance between them.

# Geographic Distance:
# If you have the geographic coordinates (e.g., latitude and longitude) of the sites, you can calculate the geographic distance matrix. This can be done using various distance metrics, such as Haversine distance or Vincenty distance, which take into account the curvature of the Earth's surface.

# Genetic Distance:
# If you have genetic data for the sites, you can calculate a genetic distance matrix. This can be done using various genetic distance metrics, such as Fst (fixation index) or pairwise genetic differences.

# Dissimilarity Measures:
# If you have categorical data representing the sites (e.g., land cover types, species presence/absence), you can calculate dissimilarity matrices using measures such as Jaccard distance, Bray-Curtis dissimilarity, or Gower distance.

# Environmental Distance:
# If you have environmental variables measured at the sites (e.g., temperature, precipitation), you can calculate an environmental distance matrix based on the differences in environmental conditions.

# The choice of the appropriate method depends on the nature of your data and the specific hypothesis you want to test. Each method provides a different perspective on the relationships between sites. It is important to choose a method that is relevant to your research question and aligns with the type of data you have available.



#################################################
#
#  Isolation by distance test for Fst vs xy coordinates (distance)
#
#################################################

msl8_70md Fst Table
Site	RMT	NTP	RBM	BBF	BBM	PKM	GFM	HRM	STM	TG	SCM
RMT	0	0.159692	0.188168	0.217554	0.204693	0.18832	0.184286	0.262285	0.306999	0.232321	0.200707
NTP		0	0.163435	0.186786	0.199245	0.190819	0.202729	0.261783	0.304027	0.214406	0.150778
RBM			0	0.201946	0.199665	0.200679	0.199113	0.281811	0.294816	0.21361	0.189411
BBF				0	0.269264	0.221336	0.228546	0.361705	0.371751	0.281507	0.230222
BBM					0	0.224671	0.225393	0.349507	0.49673	0.284487	0.273689
PKM						0	0.168522	0.278485	0.28916	0.253728	0.211033
GFM							0	0.273071	0.323301	0.259669	0.205768
HRM								0	0.353702	0.368023	0.300398
STM									0	0.484215	0.300157
TG										0	0.285616
SCM											0

site locations
Site	N_samples	Site_Name	Latitude	Longitude	Elevation_Meters	Elevation_Feet
RMT	16	Roan Mtn, NC	36.10473842	-82.10390106	1764	5787.684
NTP	11	Nine Times, SC	34.94473524	-82.7956641	372	1220.532
RBM	10	Rabun Bald, NC	34.96271944	-83.29390833	1131	3710.811
BBF	6	Big Bend Falls, SC	34.94234469	-83.11648331	620	2034.22
BBM	4	Black Balsalm Mtn, NC	35.32449722	-82.87142222	1741	5712.221
PKM	9	Potato Knob, NC	35.72622778	-82.28910833	1719	5640.039
GFM	9	Grandfather Mtn, NC	36.09979722	-81.82645278	1698	5571.138
HRM	10	Hanging Rock Mtn, NC	36.39659444	-80.25517222	559	1834.079
STM	5	Stone Mtn, NC	36.39012222	-81.05083333	524	1719.244
TG	8	Tallulah Gorge, GA	34.735966	-83.389797	448	1469.888
SCM	8	Scaly Mtn, NC	35.042862	-83.283288	1441	4727.921





## First we import the fst values
# Read Fst table
fst_table <- read.table("msl8_70md_fst.txt", header = TRUE, row.names = 1, sep="\t")

fst_matrix <- as.matrix(fst_table)

## then we need to replace all NA values in the fst matrix to teh corresponding value

	
"","RMT","NTP","RBM","BBF","BBM","PKM","GFM","HRM","STM","TG","SCM"
"RMT",0,0.159692,0.188168,0.217554,0.204693,0.18832,0.184286,0.262285,0.306999,0.232321,0.200707
"NTP",NA,0,0.163435,0.186786,0.199245,0.190819,0.202729,0.261783,0.304027,0.214406,0.150778
"RBM",NA,NA,0,0.201946,0.199665,0.200679,0.199113,0.281811,0.294816,0.21361,0.189411
"BBF",NA,NA,NA,0,0.269264,0.221336,0.228546,0.361705,0.371751,0.281507,0.230222
"BBM",NA,NA,NA,NA,0,0.224671,0.225393,0.349507,0.49673,0.284487,0.273689
"PKM",NA,NA,NA,NA,NA,0,0.168522,0.278485,0.28916,0.253728,0.211033
"GFM",NA,NA,NA,NA,NA,NA,0,0.273071,0.323301,0.259669,0.205768
"HRM",NA,NA,NA,NA,NA,NA,NA,0,0.353702,0.368023,0.300398
"STM",NA,NA,NA,NA,NA,NA,NA,NA,0,0.484215,0.300157
"TG",NA,NA,NA,NA,NA,NA,NA,NA,NA,0,0.285616
"SCM",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,0

## code to perform above

# Replace NA values in the Fst matrix with corresponding values from the table
for (i in 1:nrow(fst_matrix)) {
  for (j in 1:ncol(fst_matrix)) {
    if (is.na(fst_matrix[i, j])) {
      fst_matrix[i, j] <- fst_table[j, i]
    }
  }
}

# Print the updated Fst matrix
fst_matrix

"","RMT","NTP","RBM","BBF","BBM","PKM","GFM","HRM","STM","TG","SCM"
"RMT",0,0.159692,0.188168,0.217554,0.204693,0.18832,0.184286,0.262285,0.306999,0.232321,0.200707
"NTP",0.159692,0,0.163435,0.186786,0.199245,0.190819,0.202729,0.261783,0.304027,0.214406,0.150778
"RBM",0.188168,0.163435,0,0.201946,0.199665,0.200679,0.199113,0.281811,0.294816,0.21361,0.189411
"BBF",0.217554,0.186786,0.201946,0,0.269264,0.221336,0.228546,0.361705,0.371751,0.281507,0.230222
"BBM",0.204693,0.199245,0.199665,0.269264,0,0.224671,0.225393,0.349507,0.49673,0.284487,0.273689
"PKM",0.18832,0.190819,0.200679,0.221336,0.224671,0,0.168522,0.278485,0.28916,0.253728,0.211033
"GFM",0.184286,0.202729,0.199113,0.228546,0.225393,0.168522,0,0.273071,0.323301,0.259669,0.205768
"HRM",0.262285,0.261783,0.281811,0.361705,0.349507,0.278485,0.273071,0,0.353702,0.368023,0.300398
"STM",0.306999,0.304027,0.294816,0.371751,0.49673,0.28916,0.323301,0.353702,0,0.484215,0.300157
"TG",0.232321,0.214406,0.21361,0.281507,0.284487,0.253728,0.259669,0.368023,0.484215,0,0.285616
"SCM",0.200707,0.150778,0.189411,0.230222,0.273689,0.211033,0.205768,0.300398,0.300157,0.285616,0


## now we calculate the geographical distances between sites based on their longitude and latitude coordinates using the Haversine formula. By executing this code, the geo_dist object will be a distance matrix where each element represents the geographical distance between two sites based on their longitude and latitude coordinates.

geo_dist <- distm(site_locations[, c("Longitude", "Latitude")], fun = distHaversine)

## view it
geo_dist
           [,1]      [,2]       [,3]      [,4]      [,5]      [,6]      [,7]      [,8]      [,9]     [,10]
 [1,]      0.00 143535.22 166678.738 158616.16 111158.44  45323.44  24960.42 169111.75  99734.45 191892.83
 [2,] 143535.22      0.00  45503.382  29276.10  42833.79  98408.51 155702.68 280881.73 225355.36  59048.57
 [3,] 166678.74  45503.38      0.000  16346.45  55685.66 124691.01 183557.25 317746.26 257650.05  26718.88
 [4,] 158616.16  29276.10  16346.454      0.00  48036.15 115151.43 173957.79 305207.97 246715.18  33932.10
 [5,] 111158.44  42833.79  55685.657  48036.15      0.00  69160.28 127942.95 264476.36 202606.79  80776.86
 [6,]  45323.44  98408.51 124691.008 115151.43  69160.28      0.00  58900.44 197654.91 133713.49 148889.58
 [7,]  24960.42 155702.68 183557.247 173957.79 127942.95  58900.44      0.00 144877.48  76768.30 207753.11
 [8,] 169111.75 280881.73 317746.256 305207.97 264476.36 197654.91 144877.48      0.00  71301.06 338705.26
 [9,]  99734.45 225355.36 257650.054 246715.18 202606.79 133713.49  76768.30  71301.06      0.00 280641.24
[10,] 191892.83  59048.57  26718.879  33932.10  80776.86 148889.58 207753.11 338705.26 280641.24      0.00
[11,] 159296.24  45790.54   8973.835  18884.05  48857.94 118016.35 176754.83 312399.28 251394.13  35520.81
           [,11]
 [1,] 159296.242
 [2,]  45790.544
 [3,]   8973.835
 [4,]  18884.046
 [5,]  48857.945
 [6,] 118016.346
 [7,] 176754.828
 [8,] 312399.280
 [9,] 251394.133
[10,]  35520.813
[11,]      0.000

## convert to matrix
geo_dist_matrix <- as.matrix(geo_dist)

# The distm() function with the fun = distHaversine argument calculates the geographical distances between sites based on their longitude and latitude coordinates using the Haversine formula. However, the result of distm() is not automatically a distance matrix in R's standard format. It returns a matrix object that represents the distances between the points, but it is not of class "dist" which is often expected by functions that work with distance matrices.

# To convert the matrix into a distance matrix of class "dist", the as.dist() function is used. It takes a matrix or a vector and converts it into a distance object of class "dist". In this case, geo_dist_matrix is converted into a distance matrix and assigned to geo_dist_dist.matrix.


## convert the two matrices to distance matrix for the Mantel test

fst_dist.matrix<-as.dist(fst_matrix)
geo_dist_dist.matrix<-as.dist(geo_dist_matrix)

## view them

fst_dist.matrix

         RMT      NTP      RBM      BBF      BBM      PKM      GFM      HRM      STM       TG
NTP 0.159692                                                                                 
RBM 0.188168 0.163435                                                                        
BBF 0.217554 0.186786 0.201946                                                               
BBM 0.204693 0.199245 0.199665 0.269264                                                      
PKM 0.188320 0.190819 0.200679 0.221336 0.224671                                             
GFM 0.184286 0.202729 0.199113 0.228546 0.225393 0.168522                                    
HRM 0.262285 0.261783 0.281811 0.361705 0.349507 0.278485 0.273071                           
STM 0.306999 0.304027 0.294816 0.371751 0.496730 0.289160 0.323301 0.353702                  
TG  0.232321 0.214406 0.213610 0.281507 0.284487 0.253728 0.259669 0.368023 0.484215         
SCM 0.200707 0.150778 0.189411 0.230222 0.273689 0.211033 0.205768 0.300398 0.300157 0.285616

geo_dist_dist.matrix
            1          2          3          4          5          6          7          8          9         10
2  143535.225                                                                                                   
3  166678.738  45503.382                                                                                        
4  158616.156  29276.098  16346.454                                                                             
5  111158.441  42833.791  55685.657  48036.148                                                                  
6   45323.435  98408.514 124691.008 115151.433  69160.285                                                       
7   24960.424 155702.685 183557.247 173957.792 127942.954  58900.440                                            
8  169111.750 280881.728 317746.256 305207.971 264476.357 197654.906 144877.480                                 
9   99734.453 225355.360 257650.054 246715.178 202606.795 133713.493  76768.305  71301.059                      
10 191892.833  59048.568  26718.879  33932.101  80776.858 148889.580 207753.114 338705.259 280641.238           
11 159296.242  45790.544   8973.835  18884.046  48857.945 118016.346 176754.828 312399.280 251394.133  35520.813



## now we can run a mantel test

library(ade4)  # Required for the Mantel test function

# Perform the Mantel test
mantel_fst_geodis<-mantel.randtest(fst_dist.matrix,geo_dist_dist.matrix,nrep=9999)

# Print the Mantel test results
print(mantel_fst_geodis)
Monte-Carlo test
Call: mantel.randtest(m1 = fst_dist.matrix, m2 = geo_dist_dist.matrix, 
    nrepet = 9999)

Observation: 0.5494373 

Based on 9999 replicates
Simulated p-value: 0.003 
Alternative hypothesis: greater 

     Std.Obs  Expectation     Variance 
 2.920697689 -0.001864796  0.035629197 

# The results of the mantel.randtest function indicate the outcome of a Mantel test performed between two distance matrices: fst_dist.matrix and geo_dist_dist.matrix.

# Observation: The observed Mantel test statistic is 0.5494373. This is the actual correlation coefficient between the two distance matrices being compared.

# Simulated p-value: The p-value is a measure of the statistical significance of the observed correlation coefficient. In this case, the simulated p-value is 0.003, which suggests that the observed correlation is statistically significant. A p-value less than the chosen significance level (e.g., 0.05) indicates strong evidence against the null hypothesis.

# Alternative hypothesis: The alternative hypothesis for this test is "greater." This means that the test is specifically examining whether the correlation between the two distance matrices is greater than what would be expected by chance.

# Std.Obs: The standardized observed value is 2.920697689. This represents the observed Mantel test statistic standardized by subtracting the expected value and dividing by the standard deviation. It provides a measure of how many standard deviations the observed value deviates from the expected value under the null hypothesis.

# Expectation: The expected value under the null hypothesis is -0.001864796. This is the average correlation coefficient that would be expected by chance alone.

# Variance: The variance of the Mantel test statistic under the null hypothesis is 0.035629197. This measures the spread or variability of the correlation coefficients that would be expected by chance.

# The observed correlation coefficient of 0.5494373 indicates a positive correlation between genetic and geographic distances. The simulated p-value of 0.003 suggests that this correlation is statistically significant.

# When studying population genetics, isolation by distance refers to the phenomenon where genetic differentiation increases with increasing geographic distance. In this case, the significant positive correlation suggests that genetic distance tends to increase as geographic distance increases, supporting the presence of isolation by distance.

# Therefore, based on the results of the Mantel test, there is significant evidence to suggest that isolation by distance is occurring in the population under study.







#################################################
#
#  Isolation by distance test for Fst vs elevation 
#
#################################################





## first wee call teh site info table and see what values we want, which is elevation
> site_locations
   Site N_samples             Site_Name Latitude Longitude Elevation_Meters Elevation_Feet
1   RMT        16          Roan Mtn, NC 36.10474 -82.10390             1764       5787.684
2   NTP        11        Nine Times, SC 34.94474 -82.79566              372       1220.532
3   RBM        10        Rabun Bald, NC 34.96272 -83.29391             1131       3710.811
4   BBF         6    Big Bend Falls, SC 34.94234 -83.11648              620       2034.220
5   BBM         4 Black Balsalm Mtn, NC 35.32450 -82.87142             1741       5712.221
6   PKM         9       Potato Knob, NC 35.72623 -82.28911             1719       5640.039
7   GFM         9   Grandfather Mtn, NC 36.09980 -81.82645             1698       5571.138
8   HRM        10  Hanging Rock Mtn, NC 36.39659 -80.25517              559       1834.079
9   STM         5         Stone Mtn, NC 36.39012 -81.05083              524       1719.244
10   TG         8    Tallulah Gorge, GA 34.73597 -83.38980              448       1469.888
11  SCM         8         Scaly Mtn, NC 35.04286 -83.28329             1441       4727.921

## now we extract the elevations data into a new vector
> elevation_meters<-elevation_df$Meters

## check the vector
> elevation_meters
 [1]  620 1741 1698  559  372 1719 1131 1764 1441  524  448

## now we assign to 'n' the number number of elements in the vector. By assigning it to the variable n, you can use this value later to determine the size of matrices or perform iterative operations.
> n<-length(elevation_meters)

## create an empty matrix based onteh number of elements in the elevation_meters vector
> pairwiseVertDistMatrix<-matrix(0,n,n)

## check the matrix
> pairwiseVertDistMatrix
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]
 [1,]    0    0    0    0    0    0    0    0    0     0     0
 [2,]    0    0    0    0    0    0    0    0    0     0     0
 [3,]    0    0    0    0    0    0    0    0    0     0     0
 [4,]    0    0    0    0    0    0    0    0    0     0     0
 [5,]    0    0    0    0    0    0    0    0    0     0     0
 [6,]    0    0    0    0    0    0    0    0    0     0     0
 [7,]    0    0    0    0    0    0    0    0    0     0     0
 [8,]    0    0    0    0    0    0    0    0    0     0     0
 [9,]    0    0    0    0    0    0    0    0    0     0     0
[10,]    0    0    0    0    0    0    0    0    0     0     0
[11,]    0    0    0    0    0    0    0    0    0     0     0

## run a loop to perform an absolute difference calculation on each cell in the matrix correspondinto each site's elevation, then populate the matrix.  essentially, subtract elevation 1 from elevation 1 and enter into cell 1,1.  subtract elevation 2 from elevation 1 and enter into cell 2,1, etc...
> for (i in 1:n) {
+     for (j in 1:n) {
+         pairwiseVertDistMatrix[i, j] <- abs(elevation_meters[i] - elevation_meters[j])
+     }
+ }

## Check the matrix
> pairwiseVertDistMatrix
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]
 [1,]    0 1121 1078   61  248 1099  511 1144  821    96   172
 [2,] 1121    0   43 1182 1369   22  610   23  300  1217  1293
 [3,] 1078   43    0 1139 1326   21  567   66  257  1174  1250
 [4,]   61 1182 1139    0  187 1160  572 1205  882    35   111
 [5,]  248 1369 1326  187    0 1347  759 1392 1069   152    76
 [6,] 1099   22   21 1160 1347    0  588   45  278  1195  1271
 [7,]  511  610  567  572  759  588    0  633  310   607   683
 [8,] 1144   23   66 1205 1392   45  633    0  323  1240  1316
 [9,]  821  300  257  882 1069  278  310  323    0   917   993
[10,]   96 1217 1174   35  152 1195  607 1240  917     0    76
[11,]  172 1293 1250  111   76 1271  683 1316  993    76     0

## convert to a distance matrix
> pairwiseVertDistMatrix.dist<-as.dist(pairwiseVertDistMatrix)

## check the new distance matrix
> pairwiseVertDistMatrix.dist
      1    2    3    4    5    6    7    8    9   10
2  1121                                             
3  1078   43                                        
4    61 1182 1139                                   
5   248 1369 1326  187                              
6  1099   22   21 1160 1347                         
7   511  610  567  572  759  588                    
8  1144   23   66 1205 1392   45  633               
9   821  300  257  882 1069  278  310  323          
10   96 1217 1174   35  152 1195  607 1240  917     
11  172 1293 1250  111   76 1271  683 1316  993   76

## now we can perfor the mantel test

## view the fst_dist.matrix to be sure the matrices are of equal dimensions
fst_dist.matrix

         RMT      NTP      RBM      BBF      BBM      PKM      GFM      HRM      STM       TG
NTP 0.159692                                                                                 
RBM 0.188168 0.163435                                                                        
BBF 0.217554 0.186786 0.201946                                                               
BBM 0.204693 0.199245 0.199665 0.269264                                                      
PKM 0.188320 0.190819 0.200679 0.221336 0.224671                                             
GFM 0.184286 0.202729 0.199113 0.228546 0.225393 0.168522                                    
HRM 0.262285 0.261783 0.281811 0.361705 0.349507 0.278485 0.273071                           
STM 0.306999 0.304027 0.294816 0.371751 0.496730 0.289160 0.323301 0.353702                  
TG  0.232321 0.214406 0.213610 0.281507 0.284487 0.253728 0.259669 0.368023 0.484215         
SCM 0.200707 0.150778 0.189411 0.230222 0.273689 0.211033 0.205768 0.300398 0.300157 0.285616

## AOK.  Now the mantel test

> mantel_fst_elev<-mantel.randtest(fst_dist.matrix,pairwiseVertDistMatrix.dist,nrepet = 9999)
> print(mantel_fst_elev)
Monte-Carlo test
Call: mantel.randtest(m1 = fst_dist.matrix, m2 = pairwiseVertDistMatrix.dist, 
    nrepet = 9999)

Observation: 0.01387135 

Based on 9999 replicates
Simulated p-value: 0.4075 
Alternative hypothesis: greater 

      Std.Obs   Expectation      Variance 
 1.789006e-01 -4.446093e-05  6.050534e-03 
 
 

# The results of the Mantel test between Fst distance and pairwise vertical distance matrices are as follows:

# Observation: The observed Mantel statistic is 0.01387135.

# Simulated p-value: The simulated p-value is 0.4075. This indicates the probability of obtaining a Mantel statistic as extreme as the observed statistic under the null hypothesis of no correlation between the matrices. In this case, the p-value is greater than the conventional significance level of 0.05, suggesting that there is no significant correlation between Fst distance and pairwise vertical distance.

# Alternative hypothesis: The alternative hypothesis for this Mantel test is "greater," which means it tests whether there is a positive correlation between the matrices (i.e., Fst distance increases with increasing pairwise vertical distance).

# Std.Obs: The standardized observed statistic (Std.Obs) measures the number of standard deviations the observed Mantel statistic deviates from the expected mean under the null hypothesis. In this case, the observed statistic is 0.1789006 standard deviations above the expected mean.

# Expectation: The expected mean of the Mantel statistic under the null hypothesis is -4.446093e-05.

# Variance: The variance of the Mantel statistic represents the variability of the statistic under the null hypothesis. In this case, the variance is 6.050534e-03.

# Overall, based on the simulated p-value and the alternative hypothesis, there is no significant evidence to support a correlation between Fst distance and pairwise vertical distance. The observed correlation is not statistically different from what would be expected by chance alone.






#################################################
#
#  Isolation by distance test for Fst vs topography 
#
#################################################




## Here we run a mantel test on the same Fst data but use topoDistance to create a matrix of the topographic paths between each site to test if topogrpahy plays a role in popualiton subdivisions (e.g., if ridges opr mountains prevent the flow of pollen and seeds)

## we will load the raster library and convert a clip from a DEM of the entire study area, clipped in ArcGIS Pro and saved as a tif, and then covert to an object so that the topoDistance package can analyze the "cost distance" between each point 


## load libraries

library(raster)
library(topoDistance)


## import the raster
SBRM_DEM<-"raster_clip.tif"
raster_data<-raster(SBRM_DEM)

## view raster data to check
raster_data

class      : RasterLayer 
dimensions : 1305, 2087, 2723535  (nrow, ncol, ncell)
resolution : 0.004166667, 0.004166667  (x, y)
extent     : -85.925, -77.22917, 32.73333, 38.17083  (xmin, xmax, ymin, ymax)
crs        : +proj=longlat +datum=WGS84 +no_defs 
source     : raster_clip.tif 
names      : METERS 
values     : -58, 1981  (min, max)
attributes :
         ID METERS
 from:  -58      0
  to : 1981      0

## import the site coordinates that are the same projection as the raster
site_coord_wgs1984<-read.table("site_coord_wgs1984", header=TRUE)

site_coord_wgs1984

     POINT_X  POINT_Y
1  -82.10369 36.10630
2  -82.79590 34.94528
3  -83.29215 34.96130
4  -83.11612 34.94207
5  -82.87166 35.32448
6  -82.28727 35.72649
7  -81.83663 36.09219
8  -80.25593 36.39623
9  -81.05038 36.38978
10 -83.39167 34.73876
11 -83.28336 35.03563
12 -82.57091 35.12506
13 -83.14064 35.07897

## plot both to double check
plot(raster_data)
plot(site_coord_wgs1984)

## calculate teh cost distance with topoDist
topoDist_df<-topoDist(raster_data, site_coord_wgs1984, paths = FALSE)

## view the dataframe
topoDist_df

           1         2          3         4         5         6         7         8         9        10         11
1       0.00 151811.83 169300.751 162328.44 112506.42  48120.76  24902.66 181537.53 109604.30 194376.20 164322.125
2  151811.83      0.00  46318.740  29035.15  44647.08 103744.19 159035.15 306251.56 234418.19  65190.80  49433.163
3  169300.75  46318.74      0.000  17307.82  57536.19 132296.62 192322.16 350370.04 278474.30  27852.51   8640.609
4  162328.44  29035.15  17307.818      0.00  50080.71 116983.77 176960.11 334891.07 263057.70  36232.39  20453.063
5  112506.42  44647.08  57536.194  50080.71      0.00  74808.05 134833.59 292890.60 220985.72  81947.53  52778.170
6   48120.76 103744.19 132296.624 116983.77  74808.05      0.00  60107.29 218183.96 146250.72 153131.17 127541.756
7   24902.66 159035.15 192322.165 176960.11 134833.59  60107.29      0.00 158109.87  86176.63 213156.71 187567.297
8  181537.53 306251.56 350370.037 334891.07 292890.60 218183.96 158109.87      0.00  71975.58 371115.79 345624.307
9  109604.30 234418.19 278474.299 263057.70 220985.72 146250.72  86176.63  71975.58      0.00 299282.42 273719.431
10 194376.20  65190.80  27852.506  36232.39  81947.53 153131.17 213156.71 371115.79 299282.42      0.00  36465.060
11 164322.12  49433.16   8640.609  20453.06  52778.17 127541.76 187567.30 345624.31 273719.43  36465.06      0.000
12 124176.37  30210.99  74648.483  59125.39  37734.37  76116.35 131268.43 276099.17 204265.80  95349.46  69938.411
13 149149.46  38266.23  20253.777  15690.71  37363.76 112082.97 172108.51 330152.58 258260.64  45892.08  15515.269
          12        13
1  124176.37 149149.46
2   30210.99  38266.23
3   74648.48  20253.78
4   59125.39  15690.71
5   37734.37  37363.76
6   76116.35 112082.97
7  131268.43 172108.51
8  276099.17 330152.58
9  204265.80 258260.64
10  95349.46  45892.08
11  69938.41  15515.27
12      0.00  54440.73
13  54440.73      0.00

## convert to dist class
topoDist_dist <- as.dist(topoDist_df)
topoDist_dist

            1          2          3          4          5          6          7          8          9         10
2  151811.832                                                                                                   
3  169300.751  46318.740                                                                                        
4  162328.438  29035.150  17307.818                                                                             
5  112506.421  44647.078  57536.194  50080.712                                                                  
6   48120.764 103744.190 132296.624 116983.772  74808.050                                                       
7   24902.658 159035.150 192322.165 176960.108 134833.591  60107.294                                            
8  181537.534 306251.557 350370.037 334891.070 292890.601 218183.956 158109.867                                 
9  109604.300 234418.188 278474.299 263057.701 220985.725 146250.721  86176.632  71975.579                      
10 194376.196  65190.802  27852.506  36232.387  81947.535 153131.169 213156.710 371115.789 299282.420           
11 164322.125  49433.163   8640.609  20453.063  52778.170 127541.756 187567.297 345624.307 273719.431  36465.060

## view the fst_dist.matrix to be sure the matrices are of equal dimensions
fst_dist.matrix

         RMT      NTP      RBM      BBF      BBM      PKM      GFM      HRM      STM       TG
NTP 0.159692                                                                                 
RBM 0.188168 0.163435                                                                        
BBF 0.217554 0.186786 0.201946                                                               
BBM 0.204693 0.199245 0.199665 0.269264                                                      
PKM 0.188320 0.190819 0.200679 0.221336 0.224671                                             
GFM 0.184286 0.202729 0.199113 0.228546 0.225393 0.168522                                    
HRM 0.262285 0.261783 0.281811 0.361705 0.349507 0.278485 0.273071                           
STM 0.306999 0.304027 0.294816 0.371751 0.496730 0.289160 0.323301 0.353702                  
TG  0.232321 0.214406 0.213610 0.281507 0.284487 0.253728 0.259669 0.368023 0.484215         
SCM 0.200707 0.150778 0.189411 0.230222 0.273689 0.211033 0.205768 0.300398 0.300157 0.285616




## perform the mantel test

mantel_topo_vs_Fst <- mantel.randtest(fst_dist.matrix,topoDist_dist, nrepet = 9999)

## view the mantel test results

print(mantel_topo_vs_Fst)

Monte-Carlo test
Call: mantel.randtest(m1 = fst_dist.matrix, m2 = topoDist_dist, nrepet = 9999)

Observation: 0.560289 

Based on 9999 replicates
Simulated p-value: 0.0047 
Alternative hypothesis: greater 

     Std.Obs  Expectation     Variance 
 2.898451937 -0.002969082  0.037764408


# The output of the test is as follows:

# The observed correlation coefficient is 0.560289, indicating a positive correlation between the two distance matrices.
# The simulated p-value is 0.0047, which suggests that the observed correlation is statistically significant.
# The alternative hypothesis is set to "greater," indicating that the test is assessing whether the observed correlation is greater than what would be expected by chance.
# Additional information provided in the output includes:

# Std.Obs represents the standardized observed value, indicating how many standard deviations the observed correlation coefficient deviates from the mean of the null distribution.
# Expectation represents the mean value of the correlation coefficient expected under the null hypothesis.
# Variance represents the variance of the correlation coefficient expected under the null hypothesis.

# In this case, the observed correlation coefficient of 0.560289 suggests a moderate positive relationship between the genetic distance and topographic distance matrices. The low p-value of 0.0047 indicates that this correlation is statistically significant. Therefore, based on the Mantel test results, there is evidence to support a positive relationship between the two distances, indicating a possible isolation-by-distance pattern.





# Here is a table summarizing the three Mantel tests and their corresponding values:

| Test                        | Observation | Simulated p-value | Alternative hypothesis | Std.Obs    | Expectation    | Variance      |
|-----------------------------|-------------|------------------|------------------------|------------|----------------|---------------|
| Fst vs. Geo Distance        | 0.5494373   | 0.003            | greater                | 2.920697689| -0.001864796   | 0.035629197   |
| Fst vs. Pairwise Vert. Dist.| 0.01387135  | 0.4075           | greater                | 0.1789006  | -4.446093e-05  | 0.006050534   |
| Fst vs. Topo Distance       | 0.560289    | 0.0047           | greater                | 2.898451937| -0.002969082   | 0.037764408   |

# These results provide information about the observed correlations between the matrices and their statistical significance. The simulated p-values indicate the probability of obtaining a correlation as extreme as the observed correlation under the null hypothesis. The alternative hypothesis specifies the direction of the correlation (greater) being tested. The Std.Obs represents the standardized observed statistic, which measures the deviation of the observed correlation from the expected mean. The Expectation is the expected mean correlation under the null hypothesis, and the Variance indicates the variability of the correlation under the null hypothesis.

# Please note that the interpretation of these results should consider the specific context of your study and the significance level you choose.


## tabbed tables

Test 	Observation 	Simulated p-value 	Alternative hypothesis 	Std.Obs 	Expectation 	Variance |
Fst vs. Geo Distance 	0.5494373 	0.003 	greater 	2.920697689	-0.001864796 	0.035629197 |
Fst vs. Pairwise Vert. Dist.	0.01387135 	0.4075 	greater 	0.1789006 	-4.446093e-05 	0.006050534 |
Fst vs. Topo Distance 	0.560289 	0.0047 	greater 	2.898451937	-0.002969082 	0.037764408 |


geo_dist_dist.matrix
	1	2	3	4	5	6	7	8	9	10
2	143535.225	
3	166678.738	45503.382	
4	158616.156	29276.098	16346.454	
5	111158.441	42833.791	55685.657	48036.148	
6	45323.435	98408.514	124691.008	115151.433	69160.285	
7	24960.424	155702.685	183557.247	173957.792	127942.954	58900.440	
8	169111.750	280881.728	317746.256	305207.971	264476.357	197654.906	144877.480	
9	99734.453	225355.360	257650.054	246715.178	202606.795	133713.493	76768.305	71301.059	
10	191892.833	59048.568	26718.879	33932.101	80776.858	148889.580	207753.114	338705.259	280641.238	
11	159296.242	45790.544	8973.835	18884.046	48857.945	118016.346	176754.828	312399.280	251394.133	35520.813

pairwiseVertDistMatrix.dist
	1	2	3	4	5	6	7	8	9	10
2	1121	
3	1078	43	
4	61	1182	1139	
5	248	1369	1326	187	
6	1099	22	21	1160	1347	
7	511	610	567	572	759	588	
8	1144	23	66	1205	1392	45	633	
9	821	300	257	882	1069	278	310	323	
10	96	1217	1174	35	152	1195	607	1240	917	
11	172	1293	1250	111	76	1271	683	1316	993	76


topoDist_dist

	1	2	3	4	5	6	7	8	9	10
2	151811.832	
3	169300.751	46318.740	
4	162328.438	29035.150	17307.818	
5	112506.421	44647.078	57536.194	50080.712	
6	48120.764	103744.190	132296.624	116983.772	74808.050	
7	24902.658	159035.150	192322.165	176960.108	134833.591	60107.294	
8	181537.534	306251.557	350370.037	334891.070	292890.601	218183.956	158109.867	
9	109604.300	234418.188	278474.299	263057.701	220985.725	146250.721	86176.632	71975.579	
10	194376.196	65190.802	27852.506	36232.387	81947.535	153131.169	213156.710	371115.789	299282.420	
11	164322.125	49433.163	8640.609	20453.063	52778.170	127541.756	187567.297	345624.307	273719.431	36465.060

##	view	the	fst_dist.matrix	to	be	sure	the	matrices	are	of	equal	dimensions
fst_dist.matrix

	RMT	NTP	RBM	BBF	BBM	PKM	GFM	HRM	STM	TG
NTP	0.159692	
RBM	0.188168	0.163435	
BBF	0.217554	0.186786	0.201946	
BBM	0.204693	0.199245	0.199665	0.269264	
PKM	0.188320	0.190819	0.200679	0.221336	0.224671	
GFM	0.184286	0.202729	0.199113	0.228546	0.225393	0.168522	
HRM	0.262285	0.261783	0.281811	0.361705	0.349507	0.278485	0.273071	
STM	0.306999	0.304027	0.294816	0.371751	0.496730	0.289160	0.323301	0.353702	
TG	0.232321	0.214406	0.213610	0.281507	0.284487	0.253728	0.259669	0.368023	0.484215	
SCM	0.200707	0.150778	0.189411	0.230222	0.273689	0.211033	0.205768	0.300398	0.300157	0.285616
